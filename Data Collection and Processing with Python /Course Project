#This project will take you through the process of mashing up data from two different APIs to make movie recommendations. The TasteDive API lets you provide a movie (or bands, TV shows, etc.) as a query input, and returns a set of related items. The OMDB API lets you provide a movie title as a query input and get back data about the movie, including scores from various review sites (Rotten Tomatoes, IMDB, etc.).
#You will put those two together. You will use TasteDive to get related movies for a whole list of titles. You’ll combine the resulting lists of related movies, and sort them according to their Rotten Tomatoes scores (which will require making API calls to the OMDB API.)
#To avoid problems with rate limits and site accessibility, we have provided a cache file with results for all the queries you need to make to both OMDB and TasteDive. Just use requests_with_caching.get() rather than requests.get(). If you’re having trouble, you may not be formatting your queries properly, or you may not be asking for data that exists in our cache. We will try to provide as much information as we can to help guide you to form queries for which data exists in the cache.

import requests_with_caching
import json
def get_movies_from_tastedive(string):
    base_url="https://tastedive.com/api/similar"
    params_diction = {}
    params_diction['q']=string
    params_diction['type']='movies'
    params_diction['limit']=5
    tastedive_response = requests_with_caching.get(base_url, params = params_diction)
    print(tastedive_response.url)
    return tastedive_response.json()

def extract_movie_titles(result):
    dic=result['Similar']
    l=len(dic['Results'])
    li=[]
    for i in range(l):
        li.append(dic['Results'][i]['Name'])
    return li

def get_related_titles(movie_lis):
    li=[]
    for movie in movie_lis:
        li.extend(extract_movie_titles(get_movies_from_tastedive(movie)))
    return list(set(li))


def get_movie_data(title):
    base_url = 'http://www.omdbapi.com/'
    params_diction = {}
    params_diction['t'] = title
    params_diction['r'] = 'json'
    this_page_cache = requests_with_caching.get(base_url, params=params_diction)

    return json.loads(this_page_cache.text)

def get_movie_rating(dic):
    rating = dic['Ratings']
    for item in rating:
        if item['Source'] == 'Rotten Tomatoes':
            return int(item['Value'][:-1])
    return 0

def get_sorted_recommendations(listt):
    n_list = get_related_titles(listt)
    n_dict = {}
    for i in n_list:
        rating = get_movie_rating(get_movie_data(i))
        n_dict[i] = rating
    print(n_dict)
    print(sorted(n_dict, reverse=True))
    return [i[0] for i in sorted(n_dict.items(), key=lambda item: (item[1], item[0]), reverse=True)]


